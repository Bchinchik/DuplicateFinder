{------------------------------------------------------------}
{               Duplicate Finder Modul                       }
{       Copyright (c)        BChinchik                       }
{                                                            }
{       Developer:     Bogdan Chinchik                       }
{       E-mail   :     Bchinchik@ua.fm                       }
{------------------------------------------------------------}

unit DuplicateFinder;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, CheckLst, ComCtrls, Masks, ExtCtrls,
  StrUtils, ThreadDuplicateFinderModul, ActnList, ToolWin, ActnMan, ActnCtrls,
  ActnMenus, ImgList, XPStyleActnCtrls, Menus, Vcl.FileCtrl, Vcl.Grids,
  Vcl.Samples.Gauges ;

type
  TMainForm = class(TForm)
    BtnStartFind: TBitBtn;
    BtnStopFind: TBitBtn;
    BtnPlayPause: TBitBtn;
    LFindFiles: TLabel;
    LFindMask: TLabel;
    EdtFindMask: TEdit;
    LPath: TLabel;
    DirectoryListBox1: TDirectoryListBox;
    FileListBox1: TFileListBox;
    DriveComboBox1: TDriveComboBox;
    LStartFolder: TLabel;
    stat1: TStatusBar;
    ChkBoxHeader: TCheckBox;
    grp1:TGroupBox;
    BtnExit: TBitBtn;
    ChkLstBoxFindCriteria: TCheckListBox;
    MainMenu: TMainMenu;
    MniMenu: TMenuItem;
    MniStartFind: TMenuItem;
    MniHelp: TMenuItem;
    MniAbout: TMenuItem;
    MniDuplicateFinder: TMenuItem;
    MniStopFind: TMenuItem;
    MniPlayPause: TMenuItem;
    MniExit: TMenuItem;
    MniDuplicateOnName: TMenuItem;
    MniDuplicateBySize: TMenuItem;
    MniDuplicateByDate: TMenuItem;
    MniSeparator2: TMenuItem;
    MniDuplicateSelectAll: TMenuItem;
    MniSeparator1: TMenuItem;
    StrGrdRez: TStringGrid;
    GProgress: TGauge;
    lbl1: TLabel;
    lbl2: TLabel;
    procedure BtnStartFindClick(Sender: TObject);
    procedure BtnStopFindClick(Sender: TObject);
    procedure BtnPlayPauseClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure DirectoryListBox1Change(Sender: TObject);
    procedure BtnExitClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure MniExitClick(Sender: TObject);
    procedure MniStartFindClick(Sender: TObject);
    procedure MniDuplicateOnNameClick(Sender: TObject);
    procedure MniDuplicateSelectAllClick(Sender: TObject);
    procedure MniDuplicateBySizeClick(Sender: TObject);
    procedure MniStopFindClick(Sender: TObject);
    procedure MniPlayPauseClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure MniAboutClick(Sender: TObject);
    procedure MniDuplicateByDateClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);

  private
    { Private declarations }
    FCurDir: string;
    FDuplCount: Integer;
    FPictureGlyph: TBitmap;
    FindThread: ThreadFinder;
    procedure ReceiverPathSent(Sender: TObject; AddLine: String);
   // procedure ReceiverMemoSent(Sender: TObject; AddLine: String);
    procedure ReceiverCountSent(Sender: TObject; AddLine: String);
    procedure ReceiverGridSentR(Sender: TObject; Rez: TFindRezult);
    procedure ReceiverProgressSent(Sender: TObject; AddLine: String);
    procedure FMenuItmChkLstCheckUnchek(AObject: TMenuItem; BOject: TCheckListBox; CheckHeader: TCheckBox; NumItem: Integer);
    function  FGetFindCriteria: Integer;

 public
    { Public declarations }
    property FindCriteria: Integer read FGetFindCriteria;
    procedure ThreadOnTerminate(Sender: TObject);
 end;

var
  MainForm: TMainForm;

implementation

{$R *.dfm}

procedure TMainForm.BtnStartFindClick(Sender: TObject);
  var
    I: Integer;
begin
  //Clear table
  for I := 0 to StrGrdRez.ColCount - 1 do
    StrGrdRez.Cols[I].Clear;
    StrGrdRez.RowCount := 2;
    lbl2.Caption := '0';
  // Generate header table
  StrGrdRez.Cells[0, 0] := ' No.';
  StrGrdRez.Cells[1, 0] := ' Name';
  StrGrdRez.Cells[2, 0] := ' Size';
  StrGrdRez.Cells[3, 0] := ' Date Time';
  StrGrdRez.Cells[4, 0] := ' Path';
  StrGrdRez.ColWidths[1] := 100;
  StrGrdRez.ColWidths[2] := 100;
  StrGrdRez.ColWidths[3] := 120;
  StrGrdRez.ColWidths[4] := 1000;
  GProgress.Progress := 0;
  FDuplCount := 0;
  FindThread := ThreadFinder.Create(DirectoryListBox1.Directory,FindCriteria,EdtFindMask.Text);
  FindThread.OnTerminate := ThreadOnTerminate;
 // FindThread.OnMemoSent :=  ReceiverMemoSent;
  FindThread.OnGridSentR :=  ReceiverGridSentR;
  FindThread.OnProgressSent := ReceiverProgressSent;
  FindThread.OnFileCountSent := ReceiverCountSent;
  FindThread.OnPathScanSent := ReceiverPathSent;
  FindThread.Resume;

  BtnStartFind.Enabled := False;
  BtnStopFind.Visible := True;
  BtnPlayPause.Visible := True;
  MniStopFind.Enabled := True;
  MniPlayPause.Enabled := True;
  stat1.Panels[2].Text := 'Ждите...';
  FPictureGlyph := TBitmap.Create;
  FPictureGlyph.LoadFromFile(FCurDir+'\icons\control_pause_blue.bmp');
  BtnPlayPause.Glyph := FPictureGlyph;

end;

procedure TMainForm.BtnStopFindClick(Sender: TObject);
begin
  FindThread.Terminate;
  GProgress.Visible := False;
  BtnStartFind.Enabled := True;
  BtnStopFind.Visible := False;
  BtnPlayPause.Visible := False;
  MniStopFind.Enabled := False;
  MniPlayPause.Enabled := False;
  stat1.Panels[2].Text := 'Отменен';
  BtnPlayPause.Caption := 'Приостановить';
  FPictureGlyph.LoadFromFile(FCurDir+'\icons\control_pause_blue.bmp');
  BtnPlayPause.Glyph := FPictureGlyph;
  MniPlayPause.Caption := 'Приостановить';
  MniPlayPause.Bitmap := FPictureGlyph;
end;

procedure TMainForm.BtnPlayPauseClick(Sender: TObject);
begin
  if FindThread.Suspended then
  begin
    FindThread.Resume;
    BtnPlayPause.Caption := 'Приостановить';
    FPictureGlyph.LoadFromFile(FCurDir+'\icons\control_pause_blue.bmp');
    BtnPlayPause.Glyph := FPictureGlyph;
    MniPlayPause.Caption := 'Приостановить';
    MniPlayPause.Bitmap := FPictureGlyph;
  end
  else
  begin
    FindThread.Suspend;
    BtnPlayPause.Caption := 'Возобновить  ';
    FPictureGlyph.LoadFromFile(FCurDir+'\icons\control_play_blue.bmp');
    BtnPlayPause.Glyph := FPictureGlyph;
    MniPlayPause.Caption := 'Возобновить';
    MniPlayPause.Bitmap := FPictureGlyph;
  end;
end;

procedure TMainForm.FormShow(Sender: TObject);
begin
  LStartFolder.Caption := DirectoryListBox1.Directory;
  stat1.Panels[0].Text := DirectoryListBox1.Directory;
  FCurDir := GetCurrentDir;
end;

procedure TMainForm.DirectoryListBox1Change(Sender: TObject);
begin
  LStartFolder.Caption := DirectoryListBox1.Directory;
  stat1.Panels[0].Text := DirectoryListBox1.Directory;
end;

procedure TMainForm.BtnExitClick(Sender: TObject);
begin
  Close;
end;

procedure TMainForm.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  if Key=VK_ESCAPE then
    Close;
end;

procedure TMainForm.FormCloseQuery(Sender: TObject;
  var CanClose: Boolean);
begin
  if MessageDlg('Закрыть программу?',mtConfirmation, [mbOk, mbCancel], 0) = mrCancel then
  CanClose := False;
end;

procedure TMainForm.FormCreate(Sender: TObject);

begin
  StrGrdRez.Cells[0, 0] := ' No.';
  StrGrdRez.Cells[1, 0] := ' Name';
  StrGrdRez.Cells[2, 0] := ' Size';
  StrGrdRez.Cells[3, 0] := ' Date';
  StrGrdRez.Cells[4, 0] := ' Path';
  StrGrdRez.ColWidths[1] := 100;
  StrGrdRez.ColWidths[2] := 100;
  StrGrdRez.ColWidths[3] := 80;
  StrGrdRez.ColWidths[4] := 600;

end;

procedure TMainForm.MniExitClick(Sender: TObject);
begin
  BtnExit.Click;
end;

procedure TMainForm.MniStartFindClick(Sender: TObject);
begin
  BtnStartFind.Click;
end;

procedure TMainForm.MniDuplicateOnNameClick(Sender: TObject);
begin
  FMenuItmChkLstCheckUnchek(MniDuplicateOnName,ChkLstBoxFindCriteria,ChkBoxHeader,0 );
end;

procedure TMainForm.MniDuplicateBySizeClick(Sender: TObject);
begin
  FMenuItmChkLstCheckUnchek(MniDuplicateBySize,ChkLstBoxFindCriteria,ChkBoxHeader,1);
end;
procedure TMainForm.MniDuplicateByDateClick(Sender: TObject);
begin
  FMenuItmChkLstCheckUnchek(MniDuplicateByDate,ChkLstBoxFindCriteria,ChkBoxHeader,2);
end;

procedure TMainForm.MniDuplicateSelectAllClick(Sender: TObject);
begin
  if MniDuplicateSelectAll.Checked then
  begin
    MniDuplicateSelectAll.Checked := False;
    MniDuplicateOnName.Checked := False;
    MniDuplicateBySize.Checked := False;
    MniDuplicateByDate.Checked := False;
    ChkBoxHeader.Checked := False;
    ChkLstBoxFindCriteria.Checked[0] := False;
    ChkLstBoxFindCriteria.Checked[1] := False;
    ChkLstBoxFindCriteria.Checked[2] := False;
    MniDuplicateSelectAll.Caption := 'Выбрать все';
  end
  else
  begin
    MniDuplicateSelectAll.Checked := True;
    MniDuplicateOnName.Checked := True;
    MniDuplicateBySize.Checked := True;
    MniDuplicateByDate.Checked := True;
    ChkBoxHeader.Checked := True;
    ChkLstBoxFindCriteria.Checked[0] := True;
    ChkLstBoxFindCriteria.Checked[1] := True;
    ChkLstBoxFindCriteria.Checked[2] := True;
    MniDuplicateSelectAll.Caption := 'Снять все';
  end;
end;

procedure TMainForm.MniStopFindClick(Sender: TObject);
begin
  BtnStopFind.Click;
end;

procedure TMainForm.ReceiverCountSent(Sender: TObject; AddLine: String);
begin
  Stat1.Panels[1].Text := AddLine;
end;

//procedure TMainForm.ReceiverMemoSent(Sender: TObject; AddLine: String);
//begin
   //MmoDuplicateRezult.Lines.Add(AddLine);
//end;

procedure TMainForm.ReceiverGridSentR(Sender: TObject; Rez: TFindRezult);
begin
  StrGrdRez.Cells[0, StrGrdRez.RowCount-1] := ' ' + IntToStr(StrGrdRez.RowCount-1) + '.';
  StrGrdRez.Cells[1, StrGrdRez.RowCount-1] := Rez.FileName; //Writing file name
  StrGrdRez.Cells[2, StrGrdRez.RowCount-1] := IntToStr(Rez.Size); //Writing file size
  StrGrdRez.Cells[3, StrGrdRez.RowCount-1] := Rez.TimeMDateStr; //Writing file date modification
  StrGrdRez.Cells[4, StrGrdRez.RowCount-1] := Rez.Path; //Writing file path
  StrGrdRez.RowCount:=StrGrdRez.RowCount+1;
  lbl1.Visible := True;
  lbl2.Visible := True;
  if FindCriteria = 8 then
    lbl1.Caption := 'Кол-во найденных файлов:'
  else
    lbl1.Caption := 'Кол-во найденных дубликатов:';
  lbl2.Caption := IntToStr(StrGrdRez.RowCount-2);
end;

procedure TMainForm.ReceiverPathSent(Sender: TObject; AddLine: String);
begin
  Stat1.Panels[0].Text := AddLine;
end;

procedure TMainForm.ReceiverProgressSent(Sender: TObject; AddLine: String);
var
x:Integer;
begin
  x := StrToInt(AddLine);

  with GProgress do
   begin
     if not(Visible) then
      Visible := True;
     MaxValue := FindThread.ProgressMax;
     Progress := x;
   end;

end;

procedure TMainForm.MniPlayPauseClick(Sender: TObject);
begin
  BtnPlayPause.Click;
end;

procedure TMainForm.FMenuItmChkLstCheckUnchek(AObject: TMenuItem;
  BOject: TCheckListBox; CheckHeader: TCheckBox; NumItem: Integer);
begin
  if AObject.Checked = False then
  begin
    AObject.Checked := True;
    BOject.Checked[NumItem] := True;
    CheckHeader.Checked := True;
    case NumItem of
      0 : if (BOject.Checked[1])or(BOject.Checked[2]) then
            begin
              MniDuplicateSelectAll.Checked := True;
              MniDuplicateSelectAll.Caption := 'Снять все';
            end;

      1:  if (BOject.Checked[0])or(BOject.Checked[2]) then
            begin
              MniDuplicateSelectAll.Checked := True;
              MniDuplicateSelectAll.Caption := 'Снять все';
            end;
      2:  if (BOject.Checked[0])or(BOject.Checked[1]) then
            begin
              MniDuplicateSelectAll.Checked := True;
              MniDuplicateSelectAll.Caption := 'Снять все';
            end;

    end;
  end

  else
  begin
    AObject.Checked := False;
    BOject.Checked[NumItem] := False;

   case NumItem of
      0 : if not((BOject.Checked[1])or(BOject.Checked[2])) then
            begin
              CheckHeader.Checked := False;
              MniDuplicateSelectAll.Checked := False;
              MniDuplicateSelectAll.Caption := 'Выбрать все';
            end;
      1:  if not((BOject.Checked[0])or(BOject.Checked[2])) then
            begin
              CheckHeader.Checked := False;
              MniDuplicateSelectAll.Checked := False;
              MniDuplicateSelectAll.Caption := 'Выбрать все';
            end;
      2:  if not((BOject.Checked[0])or(BOject.Checked[1])) then
            begin
              CheckHeader.Checked := False;
              MniDuplicateSelectAll.Checked := False;
              MniDuplicateSelectAll.Caption := 'Выбрать все';
            end;


    end;
  end;
end;

procedure TMainForm.FormDestroy(Sender: TObject);
begin
  FPictureGlyph.Free;
end;

procedure TMainForm.MniAboutClick(Sender: TObject);
begin
 MessageDlg('Duplicate Finder Modul'+#13#10+'Copyright (c)   BChinchik'+
  #13#10+'Developer:        Bogdan Chinchik'+#13#10+
  'E-mail   :           Bchinchik@ua.fm',mtCustom,[mbOK],0)
end;



function TMainForm.FGetFindCriteria: Integer;
begin
 //By name
 if ChkLstBoxFindCriteria.Checked[0] and (not(ChkLstBoxFindCriteria.Checked[1])) and (not(ChkLstBoxFindCriteria.Checked[2]))  then Result := 1;
 //By size
 if ChkLstBoxFindCriteria.Checked[1] and (not(ChkLstBoxFindCriteria.Checked[0])) and (not(ChkLstBoxFindCriteria.Checked[2]))  then Result := 2;
 //By datetime
 if ChkLstBoxFindCriteria.Checked[2] and (not(ChkLstBoxFindCriteria.Checked[0])) and (not(ChkLstBoxFindCriteria.Checked[1]))  then Result := 3;
 //By name and size
 if ChkLstBoxFindCriteria.Checked[0] and ((ChkLstBoxFindCriteria.Checked[1])) and (not(ChkLstBoxFindCriteria.Checked[2]))  then Result := 4;
 //By name and datetime
 if ChkLstBoxFindCriteria.Checked[0] and (not(ChkLstBoxFindCriteria.Checked[1])) and ((ChkLstBoxFindCriteria.Checked[2]))  then Result := 5;
 //By size and datetime
 if ChkLstBoxFindCriteria.Checked[1] and ((ChkLstBoxFindCriteria.Checked[2])) and (not(ChkLstBoxFindCriteria.Checked[0]))  then Result := 6;
 //By name,size,datetime
 if ChkLstBoxFindCriteria.Checked[0] and ((ChkLstBoxFindCriteria.Checked[1])) and ((ChkLstBoxFindCriteria.Checked[2]))  then Result := 7;
 //No find duplicate, just find files on mask
 if not(ChkLstBoxFindCriteria.Checked[0]) and (not(ChkLstBoxFindCriteria.Checked[1])) and (not(ChkLstBoxFindCriteria.Checked[2]))  then Result := 8;

end;



procedure TMainForm.ThreadOnTerminate(Sender: TObject);
begin
  StrGrdRez.SetFocus;
  Stat1.Panels[2].Text := 'Завершен';
  BtnStartFind.Enabled := True;
  BtnStopFind.Visible := False;
  BtnPlayPause.Visible := False;
  MniStopFind.Enabled := False;
  MniPlayPause.Enabled := False;
  GProgress.Visible := False;
  FindThread.Terminate;

end;







end.
